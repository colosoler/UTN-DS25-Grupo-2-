// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  name       String    @db.VarChar(50)
  surname    String    @db.VarChar(50)
  password   String    
  materiales Material[] // Establece la relaci칩n con los materiales
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Carrera {
  id         Int              @id @default(autoincrement())
  nombre     String           @db.VarChar(100)
  icon     String           @db.VarChar(100) @default("")
  materias   CarreraMateria[] 
  materiales Material[] // Establece la relaci칩n con materiales
  @@map("carreras")
}

model Materia {
  id          Int              @id @default(autoincrement())
  nombre      String           @db.VarChar(100)
  descripcion String           @db.Text
  carreras    CarreraMateria[]
  materiales  Material[] // Establece la relaci칩n con materiales

  @@map("materias")
}

model CarreraMateria {
  carreraId Int
  materiaId Int
  anio      Int

  carrera   Carrera @relation(fields: [carreraId], references: [id])
  materia   Materia @relation(fields: [materiaId], references: [id])

  @@id([carreraId, materiaId]) // Esto indica que es una clave compuesta
  @@map("carrera_materia")
}

model Material {
  id               Int      @id @default(autoincrement())
  a침oCursada       Int
  archivo          String
  cantidadReportes Int      @default(0)
  comision         String   @db.VarChar(50)
  descripcion      String   @db.Text
  fecha            DateTime @default(now())
  numeroParcial    Int?     
  titulo           String   @db.VarChar(200)
  tipo             TipoMaterial
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  materiaId Int
  carreraId Int
  userId    Int

  // Relaciones
  materia   Materia  @relation(fields: [materiaId], references: [id])
  carrera   Carrera  @relation(fields: [carreraId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("materials")
}

enum TipoMaterial {
  PARCIAL
  PARCIAL_RESUELTO
  FINAL
  FINAL_RESUELTO
  PRACTICA
  PRACTICA_RESULTA
  APUNTE
  RESUMEN
  OTRO
}