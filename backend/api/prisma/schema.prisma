generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique
  name          String         @db.VarChar(50)
  surname       String         @db.VarChar(50)
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  careerId      Int
  role          Role           @default(USER)
  materiales    Material[]
  profilePicture String?       @db.VarChar(1000)
  career        Carrera        @relation(fields: [careerId], references: [id])
  materialVotes Calificacion[]

  @@map("users")
}

model Carrera {
  id         Int              @id @default(autoincrement())
  nombre     String           @db.VarChar(100)
  icon       String           @default("") @db.VarChar(100)
  materias   CarreraMateria[]
  materiales Material[]
  users      User[]

  @@map("carreras")
}

model Materia {
  id          Int              @id @default(autoincrement())
  nombre      String           @db.VarChar(100)
  descripcion String
  carreras    CarreraMateria[]
  materiales  Material[]

  @@map("materias")
}

model CarreraMateria {
  carreraId Int
  materiaId Int
  anio      Int
  carrera   Carrera @relation(fields: [carreraId], references: [id])
  materia   Materia @relation(fields: [materiaId], references: [id])

  @@id([carreraId, materiaId])
  @@map("carrera_materia")
}

model Material {
  id               Int            @id @default(autoincrement())
  a√±oCursada      Int
  archivo          String
  cantidadReportes Int            @default(0)
  comision         String         @db.VarChar(50)
  descripcion      String
  fecha            DateTime       @default(now())
  numeroParcial    Int?
  titulo           String         @db.VarChar(200)
  tipo             TipoMaterial
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  materiaId        Int
  carreraId        Int
  userId           Int
  upvotes          Int            @default(0)
  downvotes        Int            @default(0)
  carrera          Carrera        @relation(fields: [carreraId], references: [id])
  materia          Materia        @relation(fields: [materiaId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  materialVotes    Calificacion[]

  @@map("materials")
}

enum TipoMaterial {
  PARCIAL
  PARCIAL_RESUELTO
  FINAL
  FINAL_RESUELTO
  PRACTICA
  PRACTICA_RESULTA
  APUNTE
  RESUMEN
  OTRO
}

enum Role {
  USER
  ADMIN
}

model Calificacion {
  id         Int      @id @default(autoincrement())
  userId     Int
  materialId Int
  value      Boolean
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId])
  @@map("material_votes")
}
